
function BER = runQPSKSystemUnderTest(prmQPSKTxRx, useScopes, printData)
%

% Copyright 2012-2017 The MathWorks, Inc.

%#codegen

persistent qpskTx qpskRx qpskScopes hChan hOSTBCEnc hOSTBCComb hAWGN qpskChan
coder.extrinsic('createQPSKScopes','runQPSKScopes','releaseQPSKScopes')
if isempty(qpskTx)
    
    hOSTBCEnc = comm.OSTBCEncoder(...
        'NumTransmitAntennas',prmQPSKTxRx.numTx);
    
    hOSTBCComb = comm.OSTBCCombiner(...
        'NumTransmitAntennas',prmQPSKTxRx.numTx,...
        'NumReceiveAntennas',prmQPSKTxRx.numRx);
    % Initialize the components
    % Create and configure the transmitter System object
    qpskTx = QPSKTransmitter(...
        'UpsamplingFactor',                     prmQPSKTxRx.Interpolation, ...
        'RolloffFactor',                        prmQPSKTxRx.RolloffFactor, ...
        'RaisedCosineFilterSpan',               prmQPSKTxRx.RaisedCosineFilterSpan, ...
        'MessageBits',                          prmQPSKTxRx.MessageBits, ...
        'MessageLength',                        prmQPSKTxRx.MessageLength, ...
        'NumberOfMessage',                      prmQPSKTxRx.NumberOfMessage, ...
        'ScramblerBase',                        prmQPSKTxRx.ScramblerBase, ...
        'ScramblerPolynomial',                  prmQPSKTxRx.ScramblerPolynomial, ...
        'ScramblerInitialConditions',           prmQPSKTxRx.ScramblerInitialConditions);
    
    % Create and configure the AWGN channel System object
    hAWGN = comm.AWGNChannel(...
        'NoiseMethod','Signal to noise ratio (SNR)',...
        'SNR',prmQPSKTxRx.EbNo,...
        'SignalPower',1);
    
        % Create and configure the AWGN channel System object
    qpskChan = QPSKChannel(...
        'DelayType',                            prmQPSKTxRx.DelayType, ...
        'DelayStepSize',                        0.0125*prmQPSKTxRx.Interpolation, ...
        'DelayMaximum',                         2*prmQPSKTxRx.Interpolation, ...
        'DelayMinimum',                         0.1, ...
        'RaisedCosineFilterSpan',               prmQPSKTxRx.RaisedCosineFilterSpan, ...
        'PhaseOffset',                          prmQPSKTxRx.PhaseOffset, ...
        'SignalPower',                          1/prmQPSKTxRx.Interpolation, ...
        'InterpolationFactor',                  prmQPSKTxRx.Interpolation, ...
        'EbNo',                                 prmQPSKTxRx.EbNo, ...
        'BitsPerSymbol',                        log2(prmQPSKTxRx.ModulationOrder), ...
        'FrequencyOffset',                      prmQPSKTxRx.FrequencyOffset, ...
        'SampleRate',                           prmQPSKTxRx.Fs);
    
    % MIMO channel
    hChan = comm.MIMOChannel(...
        'SampleRate',                                 prmQPSKTxRx.Rs,...
        'PathDelays',                                   prmQPSKTxRx.tau,...
        'AveragePathGains',                         prmQPSKTxRx.pdb,...
        'MaximumDopplerShift',                 prmQPSKTxRx.maxDopp,...
        'SpatialCorrelationSpecification',         'None',...
        'NumTransmitAntennas',           prmQPSKTxRx.numTx,...
        'NumReceiveAntennas',             prmQPSKTxRx.numRx,...
        'PathGainsOutputPort',                 true);

    % Create and configure the receiver System object
    qpskRx = QPSKReceiver(...
        'ModulationOrder',                      prmQPSKTxRx.ModulationOrder, ...
        'SampleRate',                           prmQPSKTxRx.Fs, ...
        'DecimationFactor',                     prmQPSKTxRx.Decimation, ...
        'FrameSize',                            prmQPSKTxRx.FrameSize, ...
        'HeaderLength',                         prmQPSKTxRx.HeaderLength, ...
        'NumberOfMessage',                      prmQPSKTxRx.NumberOfMessage, ...
        'PayloadLength',                        prmQPSKTxRx.PayloadLength, ...
        'DesiredPower',                         prmQPSKTxRx.DesiredPower, ...
        'AveragingLength',                      prmQPSKTxRx.AveragingLength, ...
        'MaxPowerGain',                         prmQPSKTxRx.MaxPowerGain, ...
        'RolloffFactor',                        prmQPSKTxRx.RolloffFactor, ...
        'RaisedCosineFilterSpan',               prmQPSKTxRx.RaisedCosineFilterSpan, ...
        'InputSamplesPerSymbol',                prmQPSKTxRx.Interpolation, ...
        'MaximumFrequencyOffset',               prmQPSKTxRx.MaximumFrequencyOffset, ...
        'PostFilterOversampling',               prmQPSKTxRx.Interpolation/prmQPSKTxRx.Decimation, ...
        'PhaseRecoveryLoopBandwidth',           prmQPSKTxRx.PhaseRecoveryLoopBandwidth, ...
        'PhaseRecoveryDampingFactor',           prmQPSKTxRx.PhaseRecoveryDampingFactor, ...
        'TimingRecoveryDampingFactor',          prmQPSKTxRx.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth',          prmQPSKTxRx.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain',              prmQPSKTxRx.TimingErrorDetectorGain, ...
        'PreambleDetectorThreshold',            prmQPSKTxRx.PreambleDetectorThreshold, ...    
        'DescramblerBase',                      prmQPSKTxRx.ScramblerBase, ...
        'DescramblerPolynomial',                prmQPSKTxRx.ScramblerPolynomial, ...
        'DescramblerInitialConditions',         prmQPSKTxRx.ScramblerInitialConditions,...
        'BerMask',                              prmQPSKTxRx.BerMask, ...
        'PrintOption',                          printData);

    if useScopes
        % Create the System object for plotting all the scopes
        sampleRate = prmQPSKTxRx.Rsym*prmQPSKTxRx.Interpolation/prmQPSKTxRx.Decimation;
        qpskScopes = createQPSKScopes(sampleRate);
    end
end

qpskRx.PrintOption = printData;

for count = 1:prmQPSKTxRx.TotalFrame
    transmittedSignal = qpskTx();                                           % Transmitter, modData
    encData = step(hOSTBCEnc,transmittedSignal);   % encoded by Alamouti code
    
    [chanOut,pathGains] = step(hChan,encData);          % MIMO Channel
    rcvdSignal = step(hAWGN,chanOut);         % AWGN channel
    chEst = squeeze(sum(pathGains,2));     % estimate
    combinedData = step(hOSTBCComb,rcvdSignal,chEst);
    receivedData = step(qpskRx,combinedData);
    
    [RCRxSignal, timingRecSignal, freqRecSignal, BER] = qpskRx(receivedData); % Receiver
    if useScopes
        runQPSKScopes(qpskScopes, rcvdSignal, RCRxSignal, timingRecSignal, freqRecSignal); % Plots all the scopes
    end
    disp({'Bit error rate: ',num2str(BER(1))});
end
if isempty(coder.target)
    release(qpskTx);
    release(qpskRx);
    release(hChan);
    release(hOSTBCEnc);
    release(hOSTBCComb);
    release(hAWGN);
end
if useScopes
     releaseQPSKScopes(qpskScopes);
end
